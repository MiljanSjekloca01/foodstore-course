Kurs Total ~ 8 sati			

				Video 1		

Naucicu kreiranje Komponenti, Express Router za API, Angular Router, Mongo DB Atlas - baza.
Reactivne forme i HTTP, RXJS, Json Web Token,   Deploy on Heroku, Koriscenje PayPal

Stvari koje cemo koristiti i trebaju se instalirati :

Git,VSCode,NodeJs,Postman
Angular Essentials - ekstenzija

git git-scm.com

Angular Essentials - Extension pack,Vise ekstenzija zajedno koje su dobre za rad sa Angularom i korisne

CTRL SHIFT P - file icon theme - material icon theme koji smo dobili iz angular essentials za izgled
fajlova




				Video 2

kreiramo angular frontent  ng new frontend --skip-tests ja msm i Yes na Angular Routing posto cemo ga koristiti

ng serve -o da otvori i browser odma sa localhost 4200

rm -rf .git uklanjanje gita iz frontenda jer cemo ga imati na nivou cijele aplikacije


Video 3

Dodavanje Headera, Generisanje Komponente, HTML i CSS 

On dodao README.md

ng g c components/partials/header


Ctrl A za selektovanje cijelog koda

rem i em su otprilike ista stvar samo se rem odnosi na root a em na trenutni roditeljski element

Dodavanje CSS-a i HTML u header komponentu kao i u glavni style.css dodavanje fonta preko api.
i nekih osnovnih css naredbi


				Video 4

Cilj - List Foods, Food Model, Data.ts,Dodati primjer hrane, Dodati slike kao atribut, Food service
i Kreiranje Home Komponente , ts,html,css

kreiramo shared folder jer ce tu biti vrv model ili nesto sto je sherovano izmedju komponenti

kreiramo model Food
id!  - oznacava da je id required
tags? - oznacava opcioni parametar 

Koristicemo sample data jer nemamo bekend trenutno i zato cemo koristiti data.ts
ili ti sample foods to jest array od vise food modela koje cemo kasnije vrv iz baze podataka vaditi ili tako nesto

Uzeo sam njegove podatke sa gita i slike, nakon toga kreiramo food service.

ng g s services/food - preko terminala kreiramo servis

Injectujemo servis preko construktora i kada smo u home komponentu dopremili food array
krecemo sa ngFor da izlistavamo sve.

<ul>
    <li *ngFor="let food of foods">
        <a routerLink="/food/{{food.id}}"></a>
    </li>
</ul> 

a link ce biti link za svaki food id posebno gdje ce biti opsirnije opisani vrv. ( food details)

<span class="favorite {{food.favorite?'' :'not'}}">  ako je food favorite true onda nista ako nije dodajemo not
kao klasu

npm install ng-starrating --force   - Paket koji cemo da koristim za zvezdice. Njega importujemo preko
RatingModula u app modul


				Video 5


Cilj:  Search Foods,Dodavanje search metode u food service,search route,search result u home componenti
i Generisanje search komponente njen ts html i css.

Napravili smo metodu koja filtrira po food.name-u
Onda smo napraviti rutu za search i stavili home componentu kao home rutu.

ActivatedRoute je servis koji dolazi iz angular router,Servis activated route nam omogucava da dobijemo informacije
o ruti, kao sto su parametri(searchParameter) 

Subscribe znaci kad god se params promjene da se pozove funkcija

activatedRoute.params.subscribe

if(params.searchTerm)   izbacuje error ili staviti searchterm  u ["searchterm"] ili disablovati error
u tsconfig.json stavimo noPropertyAccessFromIndexSignature na false


#s - referenca u inputu iz koje mozemo da dovucemo vrednost input polja.
Umjesto njega moze da se koristi [(ngModel)] ali ovako je jednostavnije. posto nama samo ta vrednost treba
u pozivu funkcije koja se desava na klik dugmeta.

#s - referenca se ne moze koristiti iz komponente samo unutar HTML sablona

(keyup.enter)=""  - svaki put kad pritisnemo enter i pustimo ga poziva npr funkciju

**** Mozda uraditi kad nema nicega u search i kad se klikne enter da vrati sve


			
				Video 6

Cilj: Food Detail Page
Dodavanje metode u food service
generisati food page content dodati ga u rute, ts ,html i css


.container > *{}   - sva djeca prvog nivoa od containera ce imati ovaj css

 .price::before{
    content: "Price: ";
    color: darkgray;
}

- CSS pseudo element before za elemente sa klasom .price
::before - da bi se dodao sadrzaj prije samog elementa.


				Video 7


Cilj: Tags Bar 
Kreiranje tag modela, dodavanje sample tagova u data.ts 
Dodavanje metoda povezanim sa tagom u food service
Dodavanje tagove u rute
Pokazati tag rezultate u home komponenti
Generisati tag komponentu
dodati je u home komponent,dodati ts,html,css

{ path: "tag/:tag", component: HomeComponent}      : - oznacavaju da je tag parametar



				Video 8


Cilj:  Cart Page

CartItem Model, Cart Model
Cart Service, Add to cart button, Cart page component,route,ts,html,css

Umjesto ovoga 
import { Food } from "./Food";

export class CartItem{
    constructor(public food:Food){
        this.food = food;
    }
   food!: Food; 
    quantity:number = 1;
    price: number = this.food.price;

}

Mozemo pojednostaviti i samo u kontruktoru staviti public 

export class CartItem{
    constructor(public food:Food){}
    quantity:number = 1;
    price: number = this.food.price;

}
ng g s services/cart - kreiranje cart servisa
@Injectable({
  providedIn: 'root'
})

- Je ekvivalentno stavljanju servisa u providers: u app module.

RxJs    *** TIP pogledati video o observables,subject,behavioursubject od istog lika mozes.

** BehaviorSubject je deo angularovog sistema za upravljanje stanjem,koristi se za djeljenje podataka
izmedju komponenata ili servisa. ( Subject ) cuva trenutnu vrednost i obavestava sve svoje trenutne
subscribere(pretplacenike) svaki put kad dodje do promene vrednosti.

Treba da ima inicijalnu vrednost ( new BehaviorSubject.. ) 
Cuva trenutnu vrednost pamti je i kada se neko prijavi ili subsc dobice poslednju sacuvanu vrednost.
Svaki put kada se vrednost promjeni svi subscriberi ce biti obavesteni i dobijaju novu vrednost

Pracenje vrednosti necega,i obavjestavanje subscribera po promjeni ali i zadrzavanje vrednosti.
Subject npr nema inicijalnu vrednost i ne zadrzava vrednost.

Znaci BehaviourSubject je mnogo fleksibilni i najcesce vise koristen

Slicno Observable samo mozda unapredjen koncept.
Samo sto Observable prati tok dogadjaja bez pamcenja.


Definisanje metoda u cart servise za dodavanje u korpu,uklanjanja iz korpe,promjene quanity nekog
itema,ciscenje korpe i
 // Reagovanje na promene u korpi preko servisa.
  // Nema manipulacije nad vrednostima
  // Posto observable moze samo da se prati
  getCartObservable():Observable<Cart>{
    return this.cartSubject.asObservable();
  }

I Funkcije za cuvanje korpe u localstorage da se ne bi izgubili podatci na refresh




			Video 9 

Nastavak Cart page-a

Cilj: ostaje isti ts,html,css koji nismo uradili 
Kreiramo title komponentu kao parcijalni dio,i on ce biti na pocetku naseg karta

@Input() - Dekorator koji se koristi kako bi se oznacila svojstva komponente koja prihvata vrednost
preko atributa od roditeljske komponente.

npr imamo komponentu kojoj je selektor app-child
<app-child [message]="parentMessage"></app-child>   
export class ChildComponent {
  @Input() message: string;
}

Donekle input predstavlja atribute koje koristimo ili ti neka svojstva koja mozemo da promjenimo
kada pozivamo selektor te komponente u roditeljskoj komponenti.

ul li:last-child{   - gadjanje zadnjeg li elementa.
    border:none;   
}

li div:not(:first-child){   -li div koji nije first child
    
}

*** Prostudirati flex-grow, flex-shrink.

flex-grow - rast - zauzimanje preostalog prostora
ako imamo 2 elementa jedan ima flex-grow 2 drugi 1 prvi ce uzet duplo vise prostora od drugog
isto tako i za smanjivanje moze kad se smanjuje da jedan element uzme vise drugi manji itd.

checkout>div - samo prvu direktnu decu sa elementom klase checkout.
checkout div - sve div elemente koji su potomci checkout

na kraju u headerComponent dodajemo da Cart ima pravi broj pravi cartQuantity

			
				Video 10


Cilj:
Not Found Component ts html css,
Dodavanje not found componente Na pages


Not found component cemo imati u home i cart-page component a i u food page component.
Isto cemo odratiti preko inputa,koristicemo inpute visible,message,resetlinkmessage,resetlinkroute.

Korisno jer npr mozemo razlicite funkcije da stavljamo u cart page razlicite u home page
npr u cartpage notFoundMessage moze biti Cart Page is Empty u home page Home Page is Empty npr.
resetlinkRouter mozemo staviti da bude drugaciji kao i drugaciji nacin dolazenja do toga da li ce biti 
visible ili nece.


Not Found u cart-page kad nema nijedna dodata hrana u cart.
Not found u food-page kada food id ne postoji.
Not Found u home page kada searchujemo hranu koje nema.





				Video 11


Cilj: Connecting to Backend.
Kreiranje bekend foldera. cd backend nakon toga npm init -y i dobijamo package.json samo
nakon toga treba da skinemo typescript npm install typescript.

Nakon sto smo to uradili dobijamo node module i package lock json. Treba da napravimo novi file
tsconfig.json u njega ubacujemo neke one time config koji nije striktno znati.

ali outDir - dje ce built javascript fajlovi biti locirani.
include valjda govorimo da ce svi typescript fajlovi od src biti transpilovani u javascript.

Create .gitignore da git ignorujemo promjene kao sto su node_modules, tako sto u gitignore napisemo
node_modules.

Kopiranje data.ts u backend src i mjenjamo ih u any[] posto nemamo pristup food modelu i tag modelu.

Instaliranje express cors   npm install express cors.
CORS(Cross-Origin Resoursce Sharing) middleware u Express.js . U NodeJs Cors je bezbednosni mehanizam
koji ogranicava web resurse,kao sto su fontovi,javascript i druge vrste resursa. da budu pozvvani iz drugih domena
osim onog sa kog su orginirani.


Sve skinute se nalazi u dependencies u package.json.

Kreiramo server.ts gde cemo importovati express. prilikom kucanja importa import express from "express";
Dobijamo error da nisu skinuti types/express koje mozemo pritiskom na solution da skinemo.

i onda u devDependencies mozemo da nadjemo @types/express. I imacemo vise typova koje treba skinuti
import cors from "cors"; - opet install.


Cors je generalno potreban zato sto cemo imati dvije localhost adrese prva je localhost:4200 gdje je angular
a druga je localhost:5000 dje ce biti nas bekend.I zato je to valjda samo za vrijeme developmenta.

app.use(cors({
    credentials:true,
    origin:["http://localhost:4200"]
}))

Ovom linijom koda govorimo expressu da koristi kors da ce imat requestove sa localhost:4200 i da koristi credentials.
to jest da ce kredentials biti poslati.

Posto koristimo typescript moramo u bekendu da installirano  npm install ts-node --save-dev.
Takodje postoji i nodemon koji ce da ubrza development valjda i njega cemo koristiti.

Ts-node omogucava izvrsavanje TypeScript koda direktno iz Node-js bez potrebe za prethodnom kompilacijom
u Javascript.

Nodemon je alat za automatsko pracenje promena u fajlovima i ponovo pokretanje aplikacije nakon sto se detektuju
promene.Koristan tokom razvoja jer omogucava automatsko osvezavanje servera ili aplikacije.Bez nodemona
morali bi rucno zaustavljati i ponovo pokretati server nakon svake izmene.

npm install nodemon --save-dev  ili mozda moze oboje sa npm install --save-dev nodemon ts-node.

Nakon toga u package.json u scripts iznad tests dodajemo 
"start": "cd src && nodemon server.ts", Da bi se znalo da pokrecemo ts code pomocu ts-node i da pratimo
preko nodemon.

** I Da bi pokrenuli Server koristimo   npm start 

JSON Formater - Extenzija google za json formatiranje.

Jedan primer get app.get("/api/foods", (req,res) => {
    res.send(sample_foods);
})

Pravimo get metode i uz pomoc onih metoda u food service.


Ovako je izgledalo dobavljanje podataka u part 1 konektovanju sa bazom preko api.
/* 

app.get("/api/foods", (req,res) => {
    res.send(sample_foods);
})

app.get("/api/foods/search/:searchTerm", (req,res) => {
    const searchTerm = req.params.searchTerm;
    const foods =  sample_foods
    .filter(food => food.name.toLowerCase()
    .includes(searchTerm.toLowerCase()));
    res.send(foods);
})

app.get("/api/foods/tags", (req,res) => {
    res.send(sample_tags);
})

app.get("/api/foods/tag/:tagName", (req,res) => {
    const tagName = req.params.tagName;
    const foods = sample_foods
    .filter(food => food.tags?.includes(tagName));
    res.send(foods);
})

app.get("/api/foods/:foodId",(req,res) => {
    const foodId = req.params.foodId;
    const food = sample_foods
    .find(food => food.id == foodId);
    res.send(food);
})

*/


				Video 12


Cilj:   Cilj je da sva hrana dolazi iz bekenda.Na home page food page.a ne iz data.ts sa frontenda.

Dodavanje urls.ts na frontend. dodajemo const BASE_URL = "http://localhost:5000";
a kad dodamo na pravi server bice ImeAplikacije.::::.com

u urls.ts Dodajemo konstante / url-ove npr FOODS_URL,foodBySearchUrl...

-Nakon toga dodavanje HtppClient Modula u app module.

-Nakon toga updejtovanje Food Servisa. Posto HTTP client valjda salje observable a ne 
raw data kao sto je food moramo da promjenimo kod u food service.

i sada getAll metoda izgleda ovako.
  getAll(): Observable<Food[]>{
    return this.http.get<Food[]>(FOODS_URL);
  }

Nakon sto se izmjenjaju sve metode prilagode metodama na bekendu.
Moramo da izmenjamo i upotrebu tih metoda u komponentama.

U home page komponenti smo napravili observable jer ima vise this.foods 
a na druge komponente.

Nakon ovoga svi podatci o hrani i tagovima dolazi iz bekenda.



			Video 13

Cilj: Login Page - front - back

Login Page generisanje komponente,route,ts,html,css,Reactive Forms Module.

Koriscenje FormGroup u ts + koriscenje formBuildera u konstruktoru koji olaksava rad sa formgroup

Takodje koriscenje Validators iz Angulara za validiranje.

Znaci u Angularu FormGroup i FormBuilder su deo Reactive Forms modula koji omogucava efikasno
upravljanje formama u Angular Aplikaciji.

A da bi mogli loginForm koji je tipa formGroup koristiti u html-u moramo da importujemo ReactiveFormsModule
( sve ovo dolazi iz angular/forms ) 

Nakon sto smo zavrsili izgled login komponente dodajemo i Login API.
Takodje i koriscenje JSON, JsonWebTokena, Testiranje Pomocu Postmena.

prva post api metoda.

app.post("/api/users/login", (req,res) => {
    const body = req.body;
})

Problem je sto se ovo salje kao json a Express ne koristi json kao default. 
i zato u server.ts dodajemo jos i app.use(express.json())

u Data.ts cemo dodati neke Sample_usere (sample_users)

Da bi koristili JsonWebToken moramo da ga instaliramo na bekend. 
Preko komande - npm install jsonwebtoken i da ga importujemo u server.ts i takodje isntaliramo
kao types.

proces generisanja tokena je sign  jwt.sign(); koji ima 3 argumenta.

-Prvi argument je payload  - sta zelimo da enkodiramo npr email u ovom sllulcaju.
- Drugi arugment je - secret ili private key string. ( sa njim moze da se dekoduje token)
- Treci argument je -  options opcije npr expiredTime expiresIn

app.post treba kao response ako je dobro da vrati token response ili ti jwttoken.
ako nije code 400 sa porukom sta je poslo po zlu.

Za testiranje ovoga koristicemo Postman.
Koristimo post request sa localhost:5000/api/users/login
Body Json { "email":"jane..", "password":"..."} i ako takav user postoji u data.ts vratice code 
200 i podatke o user-u sa njegovim tokenom.
A ako ne postoji code 400 i poruku da Email ili password nisu validni


			
			Video 14

Cilj: 
Treba da povezemo login componentu na frontend sa login api-om.
A to cemo uraditi tako sto cemo generisati User Service, User model, User subject.
login metode,local storage metode,logout metoe,itd....


u userService kreiramo novi userSubject tipa BehavioourSubject<User> on moze da ima 
read i write mode u njemu ali mi ne zelimo da ista van userService da koristi write unutar
User objekta.
Zato kreiramo userObservable koji ce koristiti userSubject.asObservable();
da bi imali nesto sto je samo readOnly.

Koristicemo i interface user Login a glavna razlika izmedju interfejsa i klase je da sa interfejsom
ne mozemo kreirati novu instancu i po defaultu svi podatci u Interfejsu su required zato se ne
koristi ! ili ?. (  za interfejse u shared kreiramo novi folder interfaces dje cemo stavljati sve interfejse)

kod http.post uvek moramo pored url da posaljemo i body.
Ako bi koristili subscribe na return kod login metode onda bi promjenili tip returna u Subscribtion a ne ObservableUser
zato koristimo pipe koji ne mjenja povratni tip a on ima neke svoje operatore
kao sto su tap i next.

tap je operator koji se koristi kada zelite pogledati ili izvrsiti neku akciju bez izmena na samom
toku podataka.

next se obicno koristi kao callback funkcija koja se poziva kada se emituje sledeca vrednost u toku
podataka.Ili u ovom slucaju Happy Massage uspjesni message ?

error se koristi za definisanje callback funkcije koja se poziva kada se desi greska u toku podataka.

callback funkcija je funkcija koja se prosledjuje kao argument drugoj funkciji i poziva se nakon
izvrsavanja te druge funkcije.

Za uspjesno loginovanje koristicemo ngx-toastr  poruku  a da bi to uradili moramo da importujemo
u modulu,importujemo browserAnimationsModule i dodamo stil u angular.json.
Ali prije toga svega treba prvo da ga instaliramo na front - npm install ngx-toastr.

Ovde moze doci do greske zbog verzija ng-toastr koja radi sa posebnom verzijom angulara.
Npr u ovom trenutku nisam mogao da skinem jer zadnja verzija ngx-toastr radi samo sa angular 16

zato treba da skinemo odredjenu verziju koja radi sa Angular 15 npm install ngx-toastr@^15.2.0
ni to nije proslo pa sam uradio
npm install ngx-toastr --force  ( npm install ngx-toastr --save --force ) i uspjelo je sa warning-s

Znaci dodajemo ToastrModule i BrowserAnimationsModule.
I takodje moramo u angular.json u styles da dodamo  "node_modules/ngx-toastr/toastr.css" ispod
glavnog css.

Takodje u appmodule toastrModule-u mora da se doda ovo
   ToastrModule.forRoot({
      timeOut: 3000,    // vrijeme zadrzavanja
      positionClass:"toast-bottom-right", // klasa definisana u css toastr.css za position
      newestOnTop:false  // cuvanje proslih poruka 
    })

Return url uglv sluzi da nas vrati na poslednju aktivnu rutu ja bi rekao. 
Uglv da nas nakon uspjesnog submitovanja ili neuspjesnog redirektuje.

Malo konfuzniji video.(13-15 minut). Nakon sto je submit gotov treba restartovati angular frontend server
Zato sto kad se mijenja angular.json mora da se restartuje server.

Nakon sto smo uspjeli da prikazemo poruke nakon uspjesnog submita treba i da prikazemo
toastr nakon neuspjesnog logina to jest kad prodje frontend provjere a ne bekend da postoji user
sa takvim parametrima.

Treba negde da sacuvamo tog usera sto se loginovo a to cemo uraditi u localstorage.

nakon sto napravimo set i get user local storage metode mozemo za userSubjecta da stavimo da je on
novi getUserFromLocalStorage posto ako ga nema pice samo new User kao i prije

Nakon sto smo to uradili vrijeme je da iz Headera Hardkodovanog imena zamjenimo sa 
Pravim loginovanim userom(Njegovim imenom).To smo uradili tako smo se se subscribovali
na userService.userObservable i stavljamo da je trenutni user taj zadnji user.

nakon toga u userService dodajemo logout funkciju koju cemo da upotrebimo u header komponenti.

*** koliko sam skontao servise konstruktora ne mozes da koristis van konstruktora ako ne dodas private.



				Video 15

Cilj: Valjda -  Razdvajanje login page na componente
Pravljenje komponenti za login page,
input container,input validation, text input, default button.

Pravimo input container komponentu koja ce imati label i background color.
imacemo u html ng-content tag novi tag u koji ce da se projektuje kontent koji budemo 
stavili izvan nje to jest u drugoj komponenti kad budemo koristili selektor ove komponente.
To jest bilo sta sto stavimo izmedju selektora komponente ce se smatrati kao da je unutar ng-contenta.

Zatim kreiramo posebnu komponentu za error Message kod logina.
Input-Validation.
Takodje koristimo Inpute() i AbstractControls kao tip koji dolazi iz angular forms koji je isti tip
kontrole kao sto imamo vec u login page.

Dodavanje Object.keys,ngOnChanges 

Object.keys() - funkcija kada zelimo da radimo sa kljucevima objekta, i kad je potreban niz tih kljuceva.

ngOnChange je Angular hook koji se poziva svaki put kada se vrednost input propertija komponente promene
omogucava da se reaguje na te promene i izvrse odredjene akcije.

changes objekat sadrzi promene u ulaznim svojstvima. ( instanca tipa SimpleChanges koji sadrzi informacije o prethodnoj
i trenutnoj vrednosti svojstva)

Sada zelimo da input-container input i input-validation stavimo sve u jednu komponentu.
A to je Text Input Componenta.


Nova stvar koju smo tamo naucili takodje dodajemo inpute ali sada imamo kod imputa tip koji moze biti
@Input()
  type: "text" | "password" | "email" = "text"; 

Samo text password ili email a default je text.

input::placeholder u css mjenjanje placeholdera.

Nakon sto smo zavrsili TextInput koji je sjajan feature jer je sad dodavanje novih elemenata poprilicno lako.
pravimo i default button.

DefaultButton - To mi nije jasno bas zasto ali pravimo i komponentu samo za button.
Kod njega dodajemo dosta inputa i jedan novi Output()
@Output() - koristimo jer je button i jer moramo da mu damo onclick event i da bi poslali event 
moramo da koristimo output.


 [ngStyle]="{
        color:color,
        'background-color':bgColor,
        'font-size.rem':fontSizeRem,
        'width.rem':widthRem
    }"

' ' - moramo jer imaju - kod font size i background color i takodje jer imamo .rem koji pokazuje koji unit se
koristi.

Sad npr ako ocemo da dodamo novo polje za login sve sto treba da uradimo je 
   <text-input
            [control]="fc.username"
            [showErrorsWhen]="isSubmitted"
            type="text"
            label="Username"
            ></text-input>
i dodamo validatore za njega npr da je required i to je to.


				
				Video 16 Najbitniji cas. Uvodjenje MongoDb



Cilj: 
Connect Login API to MongoDB Atlas.
Kreiranje MongoDB Atlasa,
Kreiranje .env fajla
Instaliranje 
	mongoose,
	dotenv
	bcryptjs
	jsonwebtoken
	express-async-handler
Konektovanje na MongoDB Atlas.
Koriscenje MongoDB podataka umjesto data.ts in apis.

Pomjeranje API u Routers folder.

Napravicemo router folder u backend folder i tu cemo storovati sve api za food u food router
sve api za ... u taj router itd. Za to cemo sve app funkcije koje su related za food prebaciti u 
food.router.ts a tamo cemo koristiti Router iz expressa koji se samo inicijalizuje kao const router = Router()
i umjesto app.get koristicemo router.get.  i samo exportujemo default router da bi mogli da koristimo u server.ts

I da bi to sve funkcionisalo vratimo se nazad u server.ts i uradimo app.use("/api/foods",foodRouter).
Rutu i importujemo foodRouter iz putanje.

Kreiranje MongoDB Atlasa i zasto ga koristimo a ne lokalni mongoDb, mongodb atlas je usluga clouda
koju pruza MongoDB kao servis. ( Lokalno dosta zavisi od lokalne masine) 
Odrzavanje i bezbednost su potpuna odgovornost korisnika,sigurnosne postavke verzije MongoDB.
MongoDB Atlas pruza ugradjene alate za sigurnost,enkripcija podataka u mirovanju i tokom prenosa.
integrisanu autentifikaciju,kontrolu pristupa, automatsko azuriranje baze podataka.

i MongoDB Atlas je dovoljno dobar za development proces.

Za password smo koristili autogenerate secure pass.

MongoDB Atlas free varijanta.

Uglv kreirali smo database, stavili za network da moze svako da pristupi sa bilo kojom ip adresom(u produkciji ne)
I uzeli smo connection string iz database sa kojim cemo se konektovati. 


.env - Ne zelimo da saljemo credentials u nas git repository. ( cuvanje konfiguracionih fajlova ili tajnih kljuceva)
API kljucevi lozinke ili druge postavke koje ne zelimo deliti javno.Unutar njega stavljamo MONGO_URI gdje
stavljamo connection string i umjesto <password> stavljamo pravi password.


OffTopic: * Heroku,Netlify,itd.. sluze za postavljanje demo verzije aplikacije na cloud platformi.

Instaliranje: 

bcryptjs - za cuvanje sifri unutar baze podataka.
express-async-handler : Async Handler.

npm install mongoose dotenv bcryptjs express-async-handler Za instaliranje svega odjednom.(jwt smo vec skinuli)

sad ako ocemo da pristupamo .env fajlovima to mozemo ovako da uradimo (server.ts fajl) 
import dotenv from 'dotenv';
dotenv.config();
process.env.MONGO_URI;

Kreiranje configs foldera gde ce biti konfiguracije za povezivanje sa bazom podatka.
i kreiramo database.config.ts  gde cemo prvo importovati ConnectOptions i connect iz mongoose.

ConnectOptions interfejs koji dolazi iz mongoose,
connect default funkcija koja se koristi za konektovanje sa bazom podataka isto iz mongoose.

connect funkcija vraca Promise i zato koristimo then funkciju da kada se funkcija zavrsi to jest Promise bude resen
"ispunjen" sta treba da se desi.

.then onda ima dva argumenta sta se desi kada konekcija bude ostvarena(promise ispunjen) druga kada 
se konekcija ne desi to jest promise bude odbijen.

Nakon toga treba u server.ts da importujemo i pozovemo funkciju.
U novijim verzijama vrv ne treba useNewUrlParser i useUnifiedTopology.
//deprecated


Sada kada smo uspostavili konekciju sa bazom(Connection succesfully) kreiramo models folder u bekendu
i food.model.ts ( Mongoose model ) 

Interface + Schema + Model.

Interface Food slican food classi u frontendu samo posto je interface nema required ili optional.

exportujemo const FoodSchema koja ce biti tipa new Schema<Food> interfejsa food i tu definisemo kako
ce dokumenti izgledati u kolekciji MongoDB baze podataka.(Definicija strukture dokumenata,podatci i vrste podataka)

Koristicemo Virtuals u Mongosose da bi definisali polja u modelu koji se ne cuvaju direktno u bazi podataka
ali se mogu koristiti kao da jesu. ( mislim da to radimo da bi dobili id 

Dok kreiramo schemu mozemo koristiti nekoliko opcija kao drugi argument u konstruktoru sheme.
Mi cemo koristiti

toJSON  sa virtuals:true - Omogucava ukljucivanje virtuelnih polja u rezultujuci JSON kada se dokument pretvara
u json format.

toObject sa virtuals:true - Isto kao i toJSON ( manipulisanje dokumentom prije nego sto ga saljemo klijentu)

timestamps: true - Mongoose automatski dodaje dva polja u dokumente createdAt i updatedAt koja cuvaju informacije
o tome kada je prvi put kreiran i kada je zadnji put updejtan.

Nakon toga treba da kreiramo Mongoose Model. ( export const FoodModel = model<Food>('food',FoodSchema); )

A taj model ce se koristiti za interakciju sa MongoDB bazom podataka,on ima sve metode koje su ugradjene
u Mongoose model ( find , findById , create ,update ) .

Takodje kreiramo i model usera ( interfejs,schema,model) 

Nakon toga ocemo da uradimo seeding podataka odnosno dodavanje pocetnih podataka u bazu podataka
povezanu sa FoodModel.

asyncHandler - rad sa asinhronim funkcijama(import iz express-async-handler).
sa await FoodModel.countDocuments() - proveravamo da li vec ima dokumenata u kolekciji povezanoj sa foodmodel.
Ako postoji znaci da je seeding vec uradjen ako ne onda se koristi FoodModel.create metoda za dodavanje pocetnih
podataka. Znaci seeding radimo tako sto odemo na localhost:5000/api/foods/seed 

Sada vrijeme je da umjesto dobavljanja podataka iz sample_foods i sample_users u routerima stavimo da se
oni uzimaju iz baze podataka i to cemo uraditi isto preko asyncHandlera zato sto

router.get("/", async (req,res) => {
    const foods = await FoodModel.find();
    res.send(sample_foods);
})

Ovakav kod rezultuje u inconsistent behaviour, i zato sto je bolje koristiti async.
I zato sto bi morali da dodajemo try/catch za errore.
Zato sto express ima error handling middleware


I onda mjenjamo funkciju po funkciju.
Prvo search - koristimo search regex koji uzima parametre koji su ukucani i koristimo,"i"  kao drugi parametar
(case-insensitive),nakon cega pravimo konstantu foods koja ce awaitovati foodmodel.find({name: {$regex: searchRegex}})
to jest aplicirace regex nad poljem ime u foodmodelu i vratiti sva rijesenja.

Drugo Tags  - koristimo const tags = await FoodModel. ali koristimo aggregate ne find .aggregate([ {
i koristimo $unwind:'$tags' } ])

aggregate - je metoda koja omogucava MongoDB upitima kompleksnu manipulaciju podataka u okviru kolekcije
omogucava da se definise niz faza (stadijuma) koji se primenjuju na dokumente u kolekciji kako bi se izvrsite
razlicite operacije agregacije.

( Svaka faza moze biti razlicita operacija kao sto su $match, $group, $sort, $project, $unwind .. )
I primena tih faza jedna za drugom ( kompleksna analiza podataka i dobijanje zeljenih rezultata)..

Mi koristimo : 

$unwind: "$tags" - 
Znaci ako imam npr 2 Food koji imaju po 3 taga rezultat unwinda ce biti
6 Food-ova sa po jednim tagom.


*** Sa njegovog comita sam uzeo ovaj dio nije prikazao na video a ispravlja gresku oko logina.

const generateTokenResponse= (user : User) => {
    const token = jwt.sign({
      email:user.email, isAdmin: user.isAdmin
    },process.env.JWT_SECRET!,{
      expiresIn:"30d"
    });

    return {
      id: user.id,
      email: user.email,
      name: user.name,
      address: user.address,
      isAdmin: user.isAdmin,
      token: token
    };
  }

_____

*** Ispratiti sta radi sa tokenom i dalje posto ga nismo u bazi ubacili..

			
				
				Video 17


Cilj:   Register User, Register Api , Register Service Method , Register Link i Register Component.

1. U user.router kreiramo register api.  Prvo projevaramo da li user sa takvim emailom vec postoji, nakon toga
moramo da enkriptujemo sifru a to radimo tako sto importujemo bcrypt iz bcryptjs-a i instaliramo types od njega.

2. Frontend - UserService pravimo register funkciju slicnu login funkciji.

3. Kreiramo register page component, form builder za njega gde cemo kreirati svoj validator sopstveni.
Koji ce provjeravati da li su sifra i confirmSifre isti. Validators novi folder.

Register html pravimo text inpute za polja. default button za register.

&nbsp;  - non breakable space u Angular template html .

Dodajemo linkove za login i register page na kraju forme.

Takodje dodajemo notMatch i minlength u VALIDATORS_MESSAGE (input-validators komponent).
za prikazivanje message ako se ne ispunjava uslov.


Video 25 -   Prelazimo na video 25 jer je napravio neku gresku da kada se registrujemo ne mozemo da se loginujemo posle.
A razlog greski je bio to sto kad se registruje korisnik sifra se enkriptuje pa moramo da isto uradimo kad je login u pitanju.


				
				Video 18 

Cilj: Loading, Dodavanje Image,Loading Componente,Loading Service,Loading interceptor

				Video 19 

Cilj: Checkout Page
Kreiranje Order Modela, Kreiranje Checkout Page komponente, Dodavanje u Ruter, Dodavanje usera u user service,
Dodavanje Korpe u korpa servis, Kreiranje Order Items List komponente za sgladistenje svih ordera.


1. Kreiranje Order modela na frontendu.
2. Generate Checkout Page Component

Kreiranje getCart()  - za dobijanje zadnje vrednosti carta u cart service
Kreiranje currentUser - za dobijanje trenutnog usera u user service

Kreiranje Form Grupe za user name i addres,uzimanje podataka iz korpe i uzimanje podataka o useru.

Kreiranje Order-list-componente u partials kao dio nase checkout page componente.
koja ima input ordera.

flex-wrap: wrap; prelazak u novi red kad se predje dostupan prostor


				Video 20 

Cilj: Dodavanje Mape na CheckoutPage.
Dodavenj Leaflet npm package  npm install leaflet --save --force  (JS library)
Dodavanje types/leaflet
Dodavanje css to angular.json 

Dodavanje AddressLatLng u Order Model. (frontend)
Kreiranje Map komponente u checkoutpage,html,css,ts

Iskreno malo konfjuzing tf ako budem htio bolje da skontam pogledaj opet.

 #ffffff7c;  - 2 stvari posle boje oznacavaju da li je npr transparent i tako to.

Kreiramo location service

Auth Guard

dodajemo ga tako sto u frontend u terminal ukucamo
ng g guard auth/guards/auth  
pritisnemo CanActivate.

zatim u app.routing.module dodajemo za checkoutcomponent pored component:
zarez i canActivate: [AuthGuard] 

i koristimo Auth Guard zato da ako user nije loginovan to jeste ako nema token ne moze
da pristupi checkout page-u.


			Video 21 


Cilj: Saving Order kad se ide na Payment.
Dodavanje Order Modela na bekendu,Dodavanje Order Statusa Enum, Dodavanje Auth middleware
Dodavanje Order Router, Create API
Dodavanje Order Urls to url.ts
Dodavanje Order Service, Dodavanje create metode
Dodavanje Auth Interceptora.

Kreiranje Order modela na bekendu ( ja sam trenutno bez lat i lng jer nisam mapu dodo)
Kreiranje OrderItem modela na bekendu 

virtuals zapravo koristimo da bi imali id polje a ne _id polje valjda.(najvaznije zasto)

Nakon sto smo zavrsili sa modelima Ordera.
Kreiramo order.router.ts

Moramo da dodamo i middleware koji ce da proverava da li je user authorizovan.
Moramo u generateTokenResponse u userRouter takodje dodati id jer nam treba u order.router

Nakon sto smo zavrsili sa create api za order.router na bekendu.Moramo ga konektovati na server
server.ts dodajemo app.use

Nakon sto ga imamo na serverskoj strani treba da ga konektujemo na frontend.
Nakon sto dodamo URL-ove za Order.

Treba da kreiramo order.service.
gde kreiramo create funkciju koja vraca http.post zahtev.
ali ona nece raditi zato sto sada treba da posaljemo i acces_token 
Zato moramo da dodamo interceptor

Interceptor ce biti zaduzen za informaciju o acces_tokenu.
A interceptori se koriste za hvatanje i manipulaciju http zahteva ili odgovora pre nego sto stignu do koda
koji je odgovoran za njihovu obradu.(Korisno za dodavanje ili manipulisanje header zahteva,dodavanje tokena
za autorizaciju,itd..)

Moramo ga dodati u app.module.ts u providers

Nakon toga moramo u checkoutPageComponent u createOrder moramo da budemo konektovani na order service
a ujedno treba i jos jedna validacija za addressLatLng koji ja jos nemam.


*****IMPORTANT u user.router i u auth.mid mi fali JWT_SECRET
****IMPORTANT od kad smo ubacili fix za login dje se compare password ne mogu oni predefinsani da se loginuju
vise.
***IMPORTANT Kada nesto dodas u Angular JSON jos jednom moras restartovat frontend server



				Video 22


Cilj: Paymant Page, generisanje komponente, dodavanje getOrderForCurrentUser api
Add Order Service method,
Konektovanje komponente na servis.
Napraviti map komponentu readonly.

Kreiranje PaymentPage,dodavanje route u app.routing.module sa AuthGuardom,
Kreiranje api-ja za getOrderForCurrentUser unutar order.router.ts
Nakon toga kreiranje funkcije unutar order.service

Uglv cijela poenta payment page je da je read only 


				Video 23

Cilj: Adding paypal, Generate Component. Dodavanje u Payment page,
Get paypal client id , Dodavanje Paypal JS u index.html, Paypal button , Pay api to order router.

1. generisemo komponentu paypal-button
Kreiramo paypal developer account da bi uzeli njihov default app i default account i u index html
<script src="https://www.paypal.com/sdk/js?currency=USD&client-id=AVjAhYO3Jhuj0NC2aqj7sLSJ8yaHZ8UhePux7jNy4VwA2Ta2M_ShiBf8YW43ZMHZOdp7CWCKRQde91Vx"></script>
povezali preko scripta

Koristimo developer paypal personal account da napravimo payment i nakon sto to uradim u bazi se updejtuje podatak
orders. Dobijemo payment.id dobijemo status Payed


			Video 24 

Cilj: Order Track Page 

Kreiranje Order-track-Page i dodavanje u app-routing-module

			


			Objasnjeno za NoSQL.

*napraviti delete hrane

Na pocetku imamo home page componentu koja preko get api dobija svu hranu iz baze podataka.
Takodje imamo getere za dobijanje searchovane hrane,hrane po tagu, takodje i kada se klikne na neku od hrana.

Dobijamo Hranu preko ID na Food-PageComponenti. Takodje postoje i metode za kreiranje,updejtovanje,
i brisanje hrane 

Takodje imamo i Usere koji su upisani u bazu podataka.
Na login imamo get na registraciju post metodu takodje imamo i delete metodu napravljenu za brisanje usera.

Takodje u bazi podataka imamo i Porudzbinu to jest Order koji se kreira iz checkout forme ako je user logovan,
Na svaki sledeci go to payment brise se onaj stari i updejtuje sa novim.

I na samom kraju imamo opciju paypal placanja koji ako se plati postavlja order na placen i dobija se 
id placanja.





			Dobar dan profesore,ovako ja sam radio angular i node web aplikaciju
sa konekcijom na mongo db, u bazi podataka imam 3 kolekcije  jedna za hranu jedna za porudzbine i jedna za 
korisnike. Na home page preko api dobijamo sve dokumente iz kolekcije hrane onda imamo tagove preko kojih takodje
filtriramo tacno odredjenu hranu iz baze podataka,takodje imamo i search.






			Video 27 Publishing na Render.com


Render.com - GitHub repository povezivanje WebServices

(dodali smo package.json u root direktorijuma)

Runtime Node
BuildCommand npm install,npm run build
Start command npm start
EnvironmentVariable su .env podatci





